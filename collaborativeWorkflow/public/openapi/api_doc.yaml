openapi: 3.0.0
info:
  title: My App API
  description: API documentation for My App
  version: 1.0.0

paths:
  /users:
    get:
      summary: Fetch all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                  
  /users/{id}:
    put:
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: User updated
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '404':
          description: User not found
        '500':
          description: Server error

    delete:
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to delete
      responses:
        '204':
          description: User deleted successfully (no content)
        '404':
          description: User not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Deletion failed <error message>

  /users/{username}:
    get:
      summary: Fetch a user by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username of the user to retrieve
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/save:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: User created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Creation failed <error message>
  /boards:
    get:
      summary: Fetch all boards
      responses:
        '200':
          description: List of boards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'

  /boards/{id}:
    get:
      summary: Fetch a board by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the board to retrieve
      responses:
        '200':
          description: Board found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '404':
          description: Board not found
    delete:
      summary: Delete a board by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the board to delete
      responses:
        '204':
          description: Board deleted successfully (no content)
        '404':
          description: Board not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Deletion failed <error message>
  
  /boards/save:
    post:
      summary: Create a new board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardDto'
      responses:
        '201':
          description: Board created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Board created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Creation failed <error message>
  
  /boards/edit/{id}:
    put:
      summary: Update an existing board
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the board to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardDto'
      responses:
        '200':
          description: Board updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Board updated
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '404':
          description: Board not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Update failed <error message>
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userName:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john@example.com

    UserDto:
      type: object
      required:
        - userName
        - mail
      properties:
        userName:
          type: string
          example: newuser
          description: Username (letters, numbers, underscores only)
        mail:
          type: string
          format: email
          example: newuser@example.com
    
    Board:
      type: object
      properties:
        id:
          type: integer
          example: 10
        name:
          type: string
          example: My Board
        userRoles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'

    BoardDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: New Board

    UserRole:
      type: object
      properties:
        id:
          type: integer
          example: 1
        role:
          type: string
          example: admin
        userId:
          type: integer
          example: 5

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 100
        title:
          type: string
          example: Task Title
        description:
          type: string
          example: Task details
