# ===============================================================
# üèóÔ∏è Cloud Build pipeline for Symfony (Cloud Run + Cloud SQL)
# - Builds with unique tag $BUILD_ID
# - Pushes :$BUILD_ID and :latest
# - Deploys the $BUILD_ID image to Cloud Run
# - Cleans old revisions (keeps active)
# ===============================================================

serviceAccount: projects/symfony-collaborative-workflow/serviceAccounts/cloud-build-sa@symfony-collaborative-workflow.iam.gserviceaccount.com

availableSecrets:
  secretManager:
    - versionName: projects/482952170159/secrets/DATABASE_URL/versions/latest
      env: DATABASE_URL
    - versionName: projects/482952170159/secrets/APP_SECRET/versions/latest
      env: APP_SECRET

steps:
  # 1) Build the Docker image (use Dockerfile located in collaborativeWorkflow/)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-f', 'Dockerfile',
        '-t', 'northamerica-northeast1-docker.pkg.dev/symfony-collaborative-workflow/symfony-repo/symfony-image:$BUILD_ID',
        '-t', 'northamerica-northeast1-docker.pkg.dev/symfony-collaborative-workflow/symfony-repo/symfony-image:latest',
        '.'
      ]

  # 2) Push both tags to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'northamerica-northeast1-docker.pkg.dev/symfony-collaborative-workflow/symfony-repo/symfony-image:$BUILD_ID'
      ]

  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'northamerica-northeast1-docker.pkg.dev/symfony-collaborative-workflow/symfony-repo/symfony-image:latest'
      ]

  # 3) Deploy the BUILD_ID-tagged image to Cloud Run (uses Secret Manager secrets)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    secretEnv: ['DATABASE_URL', 'APP_SECRET']
    args:
      - -c
      - |
        echo "Deploying image with BUILD_ID: $BUILD_ID"
        gcloud run deploy symfony-web-service \
          --image northamerica-northeast1-docker.pkg.dev/symfony-collaborative-workflow/symfony-repo/symfony-image:$BUILD_ID \
          --platform managed \
          --region northamerica-northeast1 \
          --project symfony-collaborative-workflow \
          --allow-unauthenticated \
          --cpu 1 \
          --memory 512Mi \
          --port 8080 \
          --timeout 300 \
          --concurrency 80 \
          --min-instances 1 \
          --vpc-connector symfony-vpc-connector \
          --service-account cloud-run-db-job@symfony-collaborative-workflow.iam.gserviceaccount.com \
          --set-env-vars APP_ENV=prod \
          --set-secrets DATABASE_URL=DATABASE_URL:latest,APP_SECRET=APP_SECRET:latest

  # 4) Cleanup old revisions: determine active revision from the service and delete others
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        echo "üßπ Starting cleanup of old revisions..."
        # Fetch the active revision from the service traffic
        ACTIVE_REV=$$(gcloud run services describe symfony-web-service \
          --region=northamerica-northeast1 \
          --format='value(status.traffic[0].revisionName)')
        echo "Active revision (kept): $$ACTIVE_REV"

        # List all revisions and delete those that are not the active one
        gcloud run revisions list \
          --service=symfony-web-service \
          --region=northamerica-northeast1 \
          --format='value(metadata.name)' | \
        grep -v "^$$ACTIVE_REV$$" | \
        while read REV; do
          if [ -n "$$REV" ]; then
            echo "Deleting old revision: $$REV"
            gcloud run revisions delete "$$REV" --region=northamerica-northeast1 --quiet || true
          fi
        done

        echo "üßπ Cleanup finished."

# Images produced by this build (for Cloud Build UI)
images:
  - 'northamerica-northeast1-docker.pkg.dev/symfony-collaborative-workflow/symfony-repo/symfony-image:$BUILD_ID'
  - 'northamerica-northeast1-docker.pkg.dev/symfony-collaborative-workflow/symfony-repo/symfony-image:latest'

options:
  logging: CLOUD_LOGGING_ONLY
